//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 12.0.21005.1
// 
namespace NirvanaApp.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.MyServiceClassSoap")]
    public interface MyServiceClassSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AddFeedback", ReplyAction="*")]
        System.Threading.Tasks.Task<NirvanaApp.ServiceReference1.AddFeedbackResponse> AddFeedbackAsync(NirvanaApp.ServiceReference1.AddFeedbackRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddFeedbackRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="AddFeedback", Namespace="http://tempuri.org/", Order=0)]
        public NirvanaApp.ServiceReference1.AddFeedbackRequestBody Body;
        
        public AddFeedbackRequest() {
        }
        
        public AddFeedbackRequest(NirvanaApp.ServiceReference1.AddFeedbackRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class AddFeedbackRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string fdata;
        
        public AddFeedbackRequestBody() {
        }
        
        public AddFeedbackRequestBody(string fdata) {
            this.fdata = fdata;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddFeedbackResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="AddFeedbackResponse", Namespace="http://tempuri.org/", Order=0)]
        public NirvanaApp.ServiceReference1.AddFeedbackResponseBody Body;
        
        public AddFeedbackResponse() {
        }
        
        public AddFeedbackResponse(NirvanaApp.ServiceReference1.AddFeedbackResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class AddFeedbackResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string AddFeedbackResult;
        
        public AddFeedbackResponseBody() {
        }
        
        public AddFeedbackResponseBody(string AddFeedbackResult) {
            this.AddFeedbackResult = AddFeedbackResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MyServiceClassSoapChannel : NirvanaApp.ServiceReference1.MyServiceClassSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyServiceClassSoapClient : System.ServiceModel.ClientBase<NirvanaApp.ServiceReference1.MyServiceClassSoap>, NirvanaApp.ServiceReference1.MyServiceClassSoap {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MyServiceClassSoapClient() : 
                base(MyServiceClassSoapClient.GetDefaultBinding(), MyServiceClassSoapClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.MyServiceClassSoap.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyServiceClassSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(MyServiceClassSoapClient.GetBindingForEndpoint(endpointConfiguration), MyServiceClassSoapClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyServiceClassSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MyServiceClassSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyServiceClassSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MyServiceClassSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MyServiceClassSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<NirvanaApp.ServiceReference1.AddFeedbackResponse> NirvanaApp.ServiceReference1.MyServiceClassSoap.AddFeedbackAsync(NirvanaApp.ServiceReference1.AddFeedbackRequest request) {
            return base.Channel.AddFeedbackAsync(request);
        }
        
        public System.Threading.Tasks.Task<NirvanaApp.ServiceReference1.AddFeedbackResponse> AddFeedbackAsync(string fdata) {
            NirvanaApp.ServiceReference1.AddFeedbackRequest inValue = new NirvanaApp.ServiceReference1.AddFeedbackRequest();
            inValue.Body = new NirvanaApp.ServiceReference1.AddFeedbackRequestBody();
            inValue.Body.fdata = fdata;
            return ((NirvanaApp.ServiceReference1.MyServiceClassSoap)(this)).AddFeedbackAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.MyServiceClassSoap)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.MyServiceClassSoap)) {
                return new System.ServiceModel.EndpointAddress("http://mobileservices.nirvanaspaandsalon.com/Myservice.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MyServiceClassSoapClient.GetBindingForEndpoint(EndpointConfiguration.MyServiceClassSoap);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MyServiceClassSoapClient.GetEndpointAddress(EndpointConfiguration.MyServiceClassSoap);
        }
        
        public enum EndpointConfiguration {
            
            MyServiceClassSoap,
        }
    }
}
